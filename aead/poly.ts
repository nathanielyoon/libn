const SWAP = /* @__PURE__ */ new Uint8Array(16);
/** Computes a Poly1305 MAC. */
export const poly = (key: Uint32Array, $: Uint8Array): Uint8Array => {
  let a = 2048, b = key[0] & 8191, c = key[0] >> 13 & 8191;
  let d = (key[0] >>> 26 | key[1] << 6) & 7939, e = key[1] >> 7 & 8191;
  let f = key[1] >>> 20 & 255, g = key[2] >> 14 & 8191, h = key[2] >> 1 & 8190;
  let i = (key[2] >>> 27 | key[3] << 5) & 8065, j = key[3] >> 8 & 8191;
  let k = key[3] >>> 21 & 127, l = 0, m = 0, n = 0, o, p, q, r, s, t, u, v, w;
  let x, y, z = 0, d0 = 0, d1 = 0, d2 = 0, d3 = 0, d4 = 0, d5 = 0, d6 = 0;
  while (a && z < $.length) {
    if ($.length - z < 16) {
      SWAP.fill(0).set($.subarray(z)), a = z = SWAP[$.length - z]++, $ = SWAP;
    }
    v = $[z++] | $[z++] << 8, o = (v & 8191) + l, w = $[z++] | $[z++] << 8;
    p = ((v >> 13 | w << 3) & 8191) + m, x = $[z++] | $[z++] << 8;
    q = ((w >> 10 | x << 6) & 8191) + d0, y = $[z++] | $[z++] << 8;
    r = ((x >> 7 | y << 9) & 8191) + d1, v = $[z++] | $[z++] << 8;
    s = ((y >> 4 | v << 12) & 8191) + d2, t = ((v >> 1) & 8191) + d3;
    w = $[z++] | $[z++] << 8, u = ((v >> 14 | w << 2) & 8191) + d4;
    x = $[z++] | $[z++] << 8, l = ((w >> 11 | x << 5) & 8191) + d5;
    y = $[z++] | $[z++] << 8, w = o * b + (p * k + q * j + r * i + s * g) * 5;
    m = d6 + ((x >> 8 | y << 8) & 8191), n += y >> 5 | a, v = w >> 13;
    w = (w & 8191) + (t * h + u * f + l * e + m * d + c * n) * 5, x = w >> 13;
    x += v + o * c + p * b + (q * k + r * j + s * i) * 5, v = x >> 13;
    x = (x & 8191) + (t * g + u * h + l * f + m * e + d * n) * 5, y = x >> 13;
    y += v + o * d + p * c + q * b + (r * k + s * j) * 5, v = y >> 13;
    y = (y & 8191) + (t * i + u * g + l * h + m * f + e * n) * 5, d0 = y & 8191;
    y = v + (y >>> 13) + o * e + p * d + q * c + r * b + s * k * 5, v = y >> 13;
    y = (y & 8191) + (t * j + u * i + l * g + m * h + f * n) * 5, d1 = y & 8191;
    y = v + (y >>> 13) + o * f + p * e + q * d + r * c + s * b, v = y >> 13;
    y = (y & 8191) + (t * k + u * j + l * i + m * g + h * n) * 5, d2 = y & 8191;
    y = v + (y >>> 13) + o * h + p * f + q * e + r * d + s * c, v = y >> 13;
    y = (y & 8191) + t * b + (u * k + l * j + m * i + g * n) * 5, d3 = y & 8191;
    y = v + (y >>> 13) + o * g + p * h + q * f + r * e + s * d, v = y >> 13;
    y = (y & 8191) + t * c + u * b + (l * k + m * j + i * n) * 5, d4 = y & 8191;
    y = v + (y >>> 13) + o * i + p * g + q * h + r * f + s * e, v = y >> 13;
    y = (y & 8191) + t * d + u * c + l * b + (m * k + j * n) * 5, d5 = y & 8191;
    y = v + (y >>> 13) + o * j + p * i + q * g + r * h + s * f, v = y >> 13;
    y = (y & 8191) + t * e + u * d + l * c + m * b + n * k * 5, d6 = y & 8191;
    y = v + (y >>> 13) + o * k + p * j + q * i + r * g + s * h;
    n = (y & 8191) + t * f + u * e + l * d + m * c + n * b;
    l = ((y >> 13) + (n >> 13)) * 5 + (w & 8191), m = (x & 8191) + (l >> 13);
    w = o * b + (p * k + q * j + r * i + s * g) * 5, l &= 8191, n &= 8191;
  }
  o = d0 + (m >> 13), p = d1 + (o >> 13), o &= 8191, q = d2 + (p >> 13);
  p &= 8191, r = d3 + (q >> 13), q &= 8191, s = d4 + (r >> 13), r &= 8191;
  t = d5 + (s >> 13), s &= 8191, u = d6 + (t >> 13), t &= 8191, n += u >> 13;
  u &= 8191, l += (n >> 13) * 5, n &= 8191, m = (m & 8191) + (l >> 13);
  l &= 8191, o = o + (m >> 13) & 8191, m &= 8191, b = l + 5, c = m + (b >> 13);
  d = o + (c >> 13), e = p + (d >> 13), f = q + (e >> 13), h = r + (f >> 13);
  g = s + (h >> 13), i = t + (g >> 13), j = u + (i >> 13), k = n + (j >> 13);
  v = -(k >> 13 ^ 1), w = ~v & 8191, k = (k & 8191) - (1 << 13);
  l = l & v | b & w, m = m & v | c & w, o = o & v | d & w, p = p & v | e & w;
  q = q & v | f & w, r = r & v | h & w, s = s & v | g & w, t = t & v | i & w;
  u = u & v | j & w, n = n & v | k & w, $ = new Uint8Array(16); // is output now
  $[0] = l = ((l | m << 13) & 65535) + (key[4] & 65535);
  $[2] = m = (l >> 16) + (m >> 3 | o << 10 & 65535) + (key[4] >>> 16);
  $[4] = o = (m >> 16) + (o >> 6 | p << 7 & 65535) + (key[5] & 65535);
  $[6] = p = (o >> 16) + (p >> 9 | q << 4 & 65535) + (key[5] >>> 16);
  q = (p >> 16) + ((q >> 12 | r << 1 | s << 14) & 65535) + (key[6] & 65535);
  $[10] = r = (q >> 16) + (s >> 2 | t << 11 & 65535) + (key[6] >>> 16);
  $[12] = s = (r >> 16) + (t >> 5 | u << 8 & 65535) + (key[7] & 65535);
  $[14] = t = (s >> 16) + (u >> 8 | n << 5 & 65535) + (key[7] >>> 16), $[8] = q;
  $[1] = l >> 8, $[3] = m >> 8, $[5] = o >> 8, $[7] = p >> 8, $[9] = q >> 8;
  return $[11] = r >> 8, $[13] = s >> 8, $[15] = t >> 8, $;
};
